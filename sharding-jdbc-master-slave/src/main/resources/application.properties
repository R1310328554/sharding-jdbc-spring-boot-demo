# 所有数据源列表
sharding.jdbc.datasource.names=ds-master,ds-slave-0

# 主数据源
sharding.jdbc.datasource.ds-master.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds-master.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds-master.url=jdbc:mysql://localhost:3306/dbmaster
sharding.jdbc.datasource.ds-master.username=root
sharding.jdbc.datasource.ds-master.password=root

# 从数据源，这里我是用 docker 在本地创建了2个 MySQL 服务容器，数据库名称一样，方便配置 MySQL 主从复制，端口不一样
sharding.jdbc.datasource.ds-slave-0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds-slave-0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds-slave-0.url=jdbc:mysql://localhost:3307/dbmaster
sharding.jdbc.datasource.ds-slave-0.username=root
sharding.jdbc.datasource.ds-slave-0.password=root

# 读写分离设置
sharding.jdbc.config.sharding.master-slave-rules.ds0.master-data-source-name=ds-master
sharding.jdbc.config.sharding.master-slave-rules.ds0.slave-data-source-names=ds-slave-0


# 分表配置
#actual-data-nodes：真实数据节点，由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式
sharding.jdbc.config.sharding.tables.t_user.actual-data-nodes=ds0.t_user_${0..1}
# 分表的字段配置
sharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
# 分表的算法表达式(取模 , HASH , 分块等)
sharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user_${user_id.longValue() % 2}
# 配置自动生成主键
sharding.jdbc.config.sharding.tables.t_user.key-generator-column-name=user_id

# open debug mode for mybatis，print SQL in console
logging.level.org.rockyang.shardingjdbc.common.mapper=DEBUG
logging.level.org.springframework=INFO

mybatis.configuration.cache-enabled=false


# 打开sql输出日志
sharding.jdbc.config.props.sql.show=true
sharding.jdbc.props.sql.show=true
